{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useCallback, memo, useRef } from \"react\";\nexport default /*#__PURE__*/memo(function Typewriter({\n  loop,\n  typeSpeed,\n  deleteSpeed,\n  delaySpeed,\n  words,\n  cursor\n}) {\n  // State\n  const {\n    0: speed,\n    1: setSpeed\n  } = useState(100);\n  const {\n    0: text,\n    1: setText\n  } = useState(\"\"); // Refs\n\n  const isDeleting = useRef(false);\n  const counter = useRef(0);\n  const handleTyping = useCallback(() => {\n    const index = loop ? counter.current % words.length : counter.current;\n    const word = words[index];\n    setSpeed(typeSpeed || 100);\n\n    if (isDeleting.current) {\n      // Set stoping speed\n      setSpeed(deleteSpeed || 50); // Move backwards\n\n      setText(prev => word.substring(0, prev.length - 1)); // Move to the next word when text is empty\n\n      if (text === \"\") {\n        isDeleting.current = false;\n        counter.current = counter.current + 1;\n      }\n    } else {\n      // Move Forward\n      setText(prev => word.substring(0, prev.length + 1)); // Word is completed\n\n      if (text === word) {\n        // if not loop just return\n        if (!loop) return; // else set the speed delay and start over\n\n        setSpeed(delaySpeed || 1500);\n        isDeleting.current = true;\n      }\n    }\n  }, [delaySpeed, deleteSpeed, loop, text, typeSpeed, words]);\n  useEffect(() => {\n    const timer = setTimeout(() => handleTyping(), speed);\n    return () => clearTimeout(timer);\n  }, [handleTyping, speed]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      children: text\n    }), cursor && /*#__PURE__*/_jsx(\"span\", {\n      className: \"blinking-cursor\",\n      children: \"|\"\n    })]\n  });\n});","map":null,"metadata":{},"sourceType":"module"}